CREATE OR REPLACE FORCE VIEW lego_wo_amendment_vw
AS
SELECT w.work_order_id,
       w.wo_version_id,
       w.assignment_continuity_id,
       w.amendment_in_process_num,
       w.contractor_person_id,
       w.hiring_mgr_person_id,
       w.buyer_org_id,
       w.supplier_org_id,
       w.assignment_edition_id,
       w.cac_collection1_id,
       w.cac_collection2_id,
       w.job_id,
       w.project_id,
       w.project_agreement_id,
       w.udf_collection_id,
       w.wov_udf_collection_id,
       w.approval_status,
       w.wo_status,
       w.wo_status_id,
       w.wo_cv_create_date,
       w.effective_date,
       w.approval_date,
       w.approval_wkflw_name,
       w.start_date_prev,
       w.start_date_cur,
       w.start_date_change,
       w.end_date_prev,
       w.end_date_cur,
       w.end_date_change,
       w.est_labor_prev,
       ROUND(w.est_labor_prev * NVL(cc.conversion_rate, 1), 2) AS est_labor_prev_cc,
       w.est_labor_cur,
       ROUND(w.est_labor_cur * NVL(cc.conversion_rate, 1), 2) AS est_labor_cur_cc,
       w.est_labor_change,
       w.exp_prev,
       ROUND(w.exp_prev * NVL(cc.conversion_rate, 1), 2) AS exp_prev_cc,
       w.exp_cur,
       ROUND(w.exp_cur * NVL(cc.conversion_rate, 1), 2) AS exp_cur_cc,
       w.exp_change,
       w.total_labor_prev,
       ROUND(w.total_labor_prev * NVL(cc.conversion_rate, 1), 2) AS total_labor_prev_cc,
       w.total_labor_cur,
       ROUND(w.total_labor_cur * NVL(cc.conversion_rate, 1), 2) AS total_labor_cur_cc,
       w.total_labor_change,
       w.reg_pay_rate_prev,
       ROUND(w.reg_pay_rate_prev * NVL(cc.conversion_rate, 1), 2) AS reg_pay_rate_prev_cc,
       w.reg_pay_rate_cur,
       ROUND(w.reg_pay_rate_cur * NVL(cc.conversion_rate, 1), 2) AS reg_pay_rate_cur_cc,
       w.reg_pay_rate_change,
       w.ot_pay_rate_prev,
       ROUND(w.ot_pay_rate_prev * NVL(cc.conversion_rate, 1), 2) AS ot_pay_rate_prev_cc,
       w.ot_pay_rate_cur,
       ROUND(w.ot_pay_rate_cur * NVL(cc.conversion_rate, 1), 2) AS ot_pay_rate_cur_cc,
       w.ot_pay_rate_change,
       w.dt_pay_rate_prev,
       ROUND(w.dt_pay_rate_prev * NVL(cc.conversion_rate, 1), 2) AS dt_pay_rate_prev_cc,
       w.dt_pay_rate_cur,
       ROUND(w.dt_pay_rate_cur * NVL(cc.conversion_rate, 1), 2) AS dt_pay_rate_cur_cc,
       w.dt_pay_rate_change,
       w.reg_bill_rate_prev,
       ROUND(w.reg_bill_rate_prev * NVL(cc.conversion_rate, 1), 2) AS reg_bill_rate_prev_cc,
       w.reg_bill_rate_cur,
       ROUND(w.reg_bill_rate_cur * NVL(cc.conversion_rate, 1), 2) AS reg_bill_rate_cur_cc,
       w.reg_bill_rate_change,
       w.ot_bill_rate_prev,
       ROUND(w.ot_bill_rate_prev * NVL(cc.conversion_rate, 1), 2) AS ot_bill_rate_prev_cc,
       w.ot_bill_rate_cur,
       ROUND(w.ot_bill_rate_cur * NVL(cc.conversion_rate, 1), 2) AS ot_bill_rate_cur_cc,
       w.ot_bill_rate_change,
       w.dt_bill_rate_prev,
       ROUND(w.dt_bill_rate_prev * NVL(cc.conversion_rate, 1), 2) AS dt_bill_rate_prev_cc,
       w.dt_bill_rate_cur,
       ROUND(w.dt_bill_rate_cur * NVL(cc.conversion_rate, 1), 2) AS dt_bill_rate_cur_cc,
       w.dt_bill_rate_change,
       w.reg_adj_bill_rate_prev,
       ROUND(w.reg_adj_bill_rate_prev * NVL(cc.conversion_rate, 1), 2) AS reg_adj_bill_rate_prev_cc,
       w.reg_adj_bill_rate_cur,
       ROUND(w.reg_adj_bill_rate_cur * NVL(cc.conversion_rate, 1), 2) AS reg_adj_bill_rate_cur_cc,
       w.reg_adj_bill_rate_change,
       w.ot_adj_bill_rate_prev,
       ROUND(w.ot_adj_bill_rate_prev * NVL(cc.conversion_rate, 1), 2) AS ot_adj_bill_rate_prev_cc,
       w.ot_adj_bill_rate_cur,
       ROUND(w.ot_adj_bill_rate_cur * NVL(cc.conversion_rate, 1), 2) AS ot_adj_bill_rate_cur_cc,
       w.ot_adj_bill_rate_change,
       w.dt_adj_bill_rate_prev,
       ROUND(w.dt_adj_bill_rate_prev * NVL(cc.conversion_rate, 1), 2) AS dt_adj_bill_rate_prev_cc,
       w.dt_adj_bill_rate_cur,
       ROUND(w.dt_adj_bill_rate_cur * NVL(cc.conversion_rate, 1), 2) AS dt_adj_bill_rate_cur_cc,
       w.dt_adj_bill_rate_change,
       w.reg_reimb_rate_prev,
       ROUND(w.reg_reimb_rate_prev * NVL(cc.conversion_rate, 1), 2) AS reg_reimb_rate_prev_cc,
       w.reg_reimb_rate_cur,
       ROUND(w.reg_reimb_rate_cur * NVL(cc.conversion_rate, 1), 2) AS reg_reimb_rate_cur_cc,
       w.reg_reimb_rate_change,
       w.ot_reimb_rate_prev,
       ROUND(w.ot_reimb_rate_prev * NVL(cc.conversion_rate, 1), 2) AS ot_reimb_rate_prev_cc,
       w.ot_reimb_rate_cur,
       ROUND(w.ot_reimb_rate_cur * NVL(cc.conversion_rate, 1), 2) AS ot_reimb_rate_cur_cc,
       w.ot_reimb_rate_change,
       w.dt_reimb_rate_prev,
       ROUND(w.dt_reimb_rate_prev * NVL(cc.conversion_rate, 1), 2) AS dt_reimb_rate_prev_cc,
       w.dt_reimb_rate_cur,
       ROUND(w.dt_reimb_rate_cur * NVL(cc.conversion_rate, 1), 2) AS dt_reimb_rate_cur_cc,
       w.dt_reimb_rate_change,
       w.reg_markup_prev,
       ROUND(w.reg_markup_prev * NVL(cc.conversion_rate, 1), 2) AS reg_markup_prev_cc,
       w.reg_markup_cur,
       ROUND(w.reg_markup_cur * NVL(cc.conversion_rate, 1), 2) AS reg_markup_cur_cc,
       w.reg_markup_change,
       w.ot_markup_prev,
       ROUND(w.ot_markup_prev * NVL(cc.conversion_rate, 1), 2) AS ot_markup_prev_cc,
       w.ot_markup_cur,
       ROUND(w.ot_markup_cur * NVL(cc.conversion_rate, 1), 2) AS ot_markup_cur_cc,
       w.ot_markup_change,
       w.dt_markup_prev,
       ROUND(w.dt_markup_prev * NVL(cc.conversion_rate, 1), 2) AS dt_markup_prev_cc,
       w.dt_markup_cur,
       ROUND(w.dt_markup_cur * NVL(cc.conversion_rate, 1), 2) AS dt_markup_cur_cc,
       w.dt_markup_change,
       w.custom_pay_rate_prev,
       ROUND(w.custom_pay_rate_prev * NVL(cc.conversion_rate, 1), 2) AS custom_pay_rate_prev_cc,
       w.custom_pay_rate_cur,
       ROUND(w.custom_pay_rate_cur * NVL(cc.conversion_rate, 1), 2) AS custom_pay_rate_cur_cc,
       w.custom_pay_rate_change,
       w.custom_bill_rate_prev,
       ROUND(w.custom_bill_rate_prev * NVL(cc.conversion_rate, 1), 2) AS custom_bill_rate_prev_cc,
       w.custom_bill_rate_cur,
       ROUND(w.custom_bill_rate_cur * NVL(cc.conversion_rate, 1), 2) AS custom_bill_rate_cur_cc,
       w.custom_bill_rate_change,
       w.custom_markup_prev,
       ROUND(w.custom_markup_prev * NVL(cc.conversion_rate, 1), 2) AS custom_markup_prev_cc,
       w.custom_markup_cur,
       ROUND(w.custom_markup_cur * NVL(cc.conversion_rate, 1), 2) AS custom_markup_cur_cc,
       w.custom_markup_change,
       w.public_notes,
       w.misc_conditions,
       w.phase_type_id,
       NVL(cp_jcl.constant_description, w.current_phase)   AS current_phase,
       w.address_guid,
       w.wo_amend_currency_id,
       w.wo_amend_currency,
       NVL(cc.converted_currency_id, wo_amend_currency_id) AS to_wo_amend_currency_id,
       NVL(cc.converted_currency_code, wo_amend_currency)  AS to_wo_amend_currency,
       ROUND(NVL(cc.conversion_rate, 1), 6)                AS conversion_rate               
  FROM lego_wo_amendment w,
       lego_currency_conv_rates_vw cc,
       (SELECT constant_value, constant_description
          FROM lego_java_constant_lookup
         WHERE constant_type = 'ASSIGNMENT_PHASE'
           AND locale_fk     = (SELECT UPPER(IQN_SESSION_CONTEXT_PKG.get_current_locale_string) FROM dual)) cp_jcl
 WHERE w.wo_amend_currency_id = cc.original_currency_id(+)
   AND w.phase_type_id        = cp_jcl.constant_value(+)
/
